{"version":3,"sources":["webpack://my_webpack/./src/api/api_django/api01/API01.js","webpack://my_webpack/./src/component/button/button_ripple/ButtonRipple.js","webpack://my_webpack/./src/component/input/input_text/InputText.js","webpack://my_webpack/./src/pages/city_street/__default/DefaultCity.js","webpack://my_webpack/./src/pages/city_street/component/form_yup/_main/CityForm.js","webpack://my_webpack/./src/pages/city_street/component/form_yup/input_image/InputImage.js","webpack://my_webpack/./src/pages/city_street/pages/_add_new_city/_main/AddNewCity.js"],"names":["API_City_C","data","API_FakeReal","url","method","API_City_UD","pk","ButtonRipple","props","children","onClick","type","disabled","ripple_type","title","className","propTypes","PropTypes","string","bool","any","func","defaultProps","InputText","field","form","label","placeholder","dataList","help","max_length","name","touched","errors","showError","dataListId","htmlFor","list","maxLength","id","map","item","index","key","Icon","IconsAction","x","y","object","array","number","Yup","validationSchema","shape","city","required","min","max","street","image","mixed","initialValues","default_arr_city","user","first_name","last_name","picture","image_loading","is_user","count_his","CityForm","title_submit","handleSubmit","useState","file","setFile","handleImageChange","new_file","Formik","onSubmit","values","actions","Form","autoComplete","FastField","component","InputImage","value","urls","setUrls","width","onChange","event","files","target","length","reader","FileReader","onload","result","setFieldValue","readAsDataURL","accept","deleteAnItem","delete_in_pic","onImageChange","setIsFetching","formData","profile_user","setIsSubmitted","console","log","is_fetching","is_submitted","useEffect","document","Redirect","to","localStorage","is_login","FetchingComponent","FetchingDiv","open_fetching"],"mappings":"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","file":"static/js/3861.js","sourcesContent":["import { API_FakeReal } from '../../_ConstAPI';\nimport axiosDjangoClient from '../_axios/AxiosDjango';\n\n// Create\nexport const API_City_C = (data) =>\n    API_FakeReal({}, () =>\n        axiosDjangoClient({\n            url: '/api01/c-city/',\n            method: 'POST',\n            data: data,\n        })\n    );\n\n// Retrieve Update Delete\nexport const API_City_UD = (pk, method, data = {}) =>\n    API_FakeReal({}, () =>\n        axiosDjangoClient({\n            url: '/api01/ud-city/' + pk + '/',\n            method: method,\n            data: data,\n        })\n    );\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n//\r\nimport './ButtonRipple.scss';\r\n\r\n//\r\nButtonRipple.propTypes = {\r\n    type: PropTypes.string,\r\n    title: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    ripple_type: PropTypes.string,\r\n\r\n    children: PropTypes.any,\r\n    onClick: PropTypes.func,\r\n};\r\n\r\nButtonRipple.defaultProps = {\r\n    title: '',\r\n    type: 'text',\r\n    ripple_type: 'right',\r\n    disabled: false,\r\n};\r\n\r\n//\r\nfunction ButtonRipple(props) {\r\n    // ripple_type is one of ['right', 'left', 'center']\r\n    const { children, onClick, type, disabled, ripple_type, title } = props;\r\n\r\n    //\r\n    return (\r\n        <button\r\n            className={`ButtonRipple label-field ${\r\n                disabled ? 'opacity-5 pointer-events-none' : 'cursor-pointer'\r\n            }`}\r\n            type={type}\r\n            title={title}\r\n            disabled={disabled}\r\n            onClick={onClick}\r\n        >\r\n            <div\r\n                className={`ButtonRipple_common ButtonRipple_${ripple_type} ${\r\n                    disabled ? 'display-none' : ''\r\n                }`}\r\n            />\r\n            {children}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default ButtonRipple;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// \nimport IconDiv from '../../some_div/icon_div/IconDiv';\nimport IconsAction from '../../../_icons_svg/icons_action/IconsAction';\n// \nimport './InputText.scss';\n\nInputText.propTypes = {\n    // field form of formik\n    field: PropTypes.object,\n    form: PropTypes.object,\n    // properties\n    type: PropTypes.string,\n    label: PropTypes.string,\n    placeholder: PropTypes.string,\n    dataList: PropTypes.array,\n    help: PropTypes.string,\n    max_length: PropTypes.number,\n};\n\nInputText.defaultProps = {\n    dataList: [],\n    type: 'text',\n};\n\n// \nfunction InputText(props) {\n    const {\n        field,\n        form,\n\n        type,\n        label,\n        placeholder,\n        dataList,\n        help,\n        max_length,\n    } = props;\n\n    const { name } = field;\n    const { touched, errors } = form;\n    const showError = touched[name] && errors[name];\n    const dataListId = `list_${name}_${label}`;\n\n    //\n    return (\n        <div className=\"InputText\">\n            <div>\n                <label className=\"label-field\" htmlFor={name}>\n                    {label}\n                </label>\n            </div>\n\n            <div>\n                <input\n                    className={`InputText_input brs-5px ${\n                        touched[name] && !errors[name] ? 'InputText_valid' : ''\n                    } ${\n                        touched[name] && !!errors[name]\n                            ? 'InputText_invalid'\n                            : ''\n                    }`}\n                    {...field}\n                    placeholder={placeholder}\n                    type={type}\n                    list={dataListId}\n                    maxLength={max_length}\n                />\n            </div>\n\n            {/* data list */}\n            <datalist id={dataListId}>\n                {dataList.map((item, index) => (\n                    <option key={`InputText_${index}`}>{item}</option>\n                ))}\n            </datalist>\n\n            {/* help */}\n            {help && (\n                <div className=\"help-text\">\n                    <IconDiv Icon={IconsAction} x={600}>\n                        * {help}\n                    </IconDiv>\n                </div>\n            )}\n\n            {/* error */}\n            {showError && (\n                <div className=\"error-field\">\n                    <IconDiv Icon={IconsAction} x={400} y={400}>\n                        {errors[name]}\n                    </IconDiv>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default InputText;\n","import * as Yup from 'yup';\r\n// \r\nimport image_loading from '../../../../image/my_image.png';\r\n\r\n\r\n/* ------------------ FORMIK YUP--------------- */\r\n\r\n// validation schema\r\nexport const validationSchema = Yup.object().shape({\r\n    city: Yup.string()\r\n        .required('City is required')\r\n        .min(3, 'At least 3 letters')\r\n        .max(50, 'max 50 letters'),\r\n\r\n    street: Yup.string()\r\n        .required('City is required')\r\n        .min(3, 'At least 3 letters')\r\n        .max(50, 'max 50 letters'),\r\n    image: Yup.mixed().required('Image is required'),\r\n});\r\n\r\n// initial values\r\nexport const initialValues = {\r\n    city: '',\r\n    street: '',\r\n    image: '',\r\n};\r\n\r\n/* ------------------ CITY --------------- */\r\n\r\n//\r\nexport const default_arr_city = [\r\n    {\r\n        user: {\r\n            id: 1,\r\n            first_name: 'My',\r\n            last_name: 'My',\r\n            picture: image_loading,\r\n        },\r\n        city: 'Ha Noi',\r\n        street: 'Duong lua',\r\n        image: image_loading,\r\n        is_user: true,\r\n        count_his: 2,\r\n    },\r\n];\r\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FastField, Form, Formik } from 'formik';\n//\nimport { validationSchema } from '../../../__default/DefaultCity';\nimport InputText from '../../../../../component/input/input_text/InputText';\nimport ButtonRipple from '../../../../../component/button/button_ripple/ButtonRipple';\nimport InputImage from '../input_image/InputImage';\n// \nimport './CityForm.scss';\n\n//\nCityForm.propTypes = {\n    initialValues: PropTypes.object,\n    title_submit: PropTypes.string,\n    handleSubmit: PropTypes.func,\n};\n\nCityForm.defaultProps = {\n    title_submit: 'Upload',\n};\n\n//\nfunction CityForm(props) {\n    const { initialValues, title_submit, handleSubmit } = props;\n    //\n    const [file, setFile] = useState('');\n\n    // image change\n    function handleImageChange(new_file) {\n        setFile(new_file);\n    }\n\n    //\n    return (\n        <Formik\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            onSubmit={(values, actions) => {\n                handleSubmit({\n                    city: values.city,\n                    street: values.street,\n                    image: values.image,\n                    file: file,\n                });\n            }}\n        >\n            {(props) => (\n                <Form\n                    className=\"CityForm App_Form brs-5px App_box_shadow scroll-thin\"\n                    autoComplete=\"off\"\n                >\n                    <FastField\n                        name=\"city\"\n                        component={InputText}\n                        label=\"City\"\n                        placeholder=\"Your city...\"\n                        dataList={['Ha Noi', 'Ho Chi Minh', 'Da Nang']}\n                        help=\"5-50 letters\"\n                    />\n\n                    <FastField\n                        name=\"street\"\n                        component={InputText}\n                        label=\"Street\"\n                        placeholder=\"Your Street...\"\n                        dataList={[\n                            'Nguyen Trai',\n                            'Nguyen Hue',\n                            'Quang Trung',\n                            'Tran Phu',\n                        ]}\n                        help=\"5-50 letters\"\n                    />\n\n                    <FastField\n                        name=\"image\"\n                        component={InputImage}\n                        label=\"Image\"\n                        handleImageChange={handleImageChange}\n                    />\n                    <br />\n\n                    <div className=\"App_submit\">\n                        <ButtonRipple type=\"submit\" title=\"Create new city\">\n                            {title_submit}\n                        </ButtonRipple>\n                    </div>\n                </Form>\n            )}\n        </Formik>\n    );\n}\n\nexport default CityForm;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n// \nimport ImgVidPreview from '../../../../../component/input_img_vid_preview/img_vid_preview/ImgVidPreview';\nimport InputFile from '../../../../../component/input/input_file/InputFile';\nimport IconsInput from '../../../../../_icons_svg/Icons_input/IconsInput';\n// \nimport './InputImage.scss';\n\n// \nInputImage.propTypes = {\n    // from formik\n    form: PropTypes.object,\n    field: PropTypes.object,\n    // type label\n    type: PropTypes.string,\n    label: PropTypes.string,\n    // func image change\n    onImageChange: PropTypes.func,\n};\n\nInputImage.defaultProps = {\n    type: 'file',\n};\n\n//\nfunction InputImage(props) {\n    const { form, field, type, label, handleImageChange } = props;\n\n    const { name, value } = field;\n    const { touched, errors } = form;\n    const showError = touched[name] && errors[name];\n    \n    //\n    const [urls, setUrls] = useState(value ? [{ url: value, type: name}] : []);\n\n/* ------------------- IMAGE ----------------------*/\n\n    // on image change\n    function onImageChange(event) {\n        const files = event.target.files;\n        // \n        if (files.length) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                setUrls([{ url: reader.result, type: files[0].type }]);\n                form.setFieldValue('image', reader.result);\n            };\n            reader.readAsDataURL(files[0]);\n            handleImageChange(files[0]);\n        }\n    }\n\n    // delete image\n    function handleDeleteAnItem(){\n        setUrls([]);\n        handleImageChange('');\n        form.setFieldValue('image', '');\n    };\n\n    // \n    return (\n        <div className=\"InputImage\">\n            <div>\n                <label className=\"label-field\" htmlFor={name}>\n                    {label}\n                </label>\n            </div>\n\n            <div className=\"InputImage_file\">\n                <InputFile\n                    width=\"2rem\"\n                    type={type}\n                    {...field}\n                    onChange={onImageChange}\n                    accept=\"image/*\"\n                >\n                    <IconsInput />\n                </InputFile>\n            </div>\n\n            {/* error */}\n            {showError && <div className=\"error-field\">{showError}</div>}\n\n            {/* image preview */}\n            <div className=\"InputImage_preview\">\n                <ImgVidPreview\n                    deleteAnItem={handleDeleteAnItem}\n                    delete_in_pic={true}\n                    urls={urls}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default InputImage;\n","import React, { useEffect, useState } from 'react';\nimport { Redirect } from 'react-router-dom';\n//\nimport { API_City_C } from '../../../../../api/api_django/api01/API01';\nimport makeFormData from '../../../../../_some_function/makeFormData';\n//\nimport BlurFetchingDiv from '../../../../../component/some_div/fetching/BlurFetchingDiv';\nimport FetchingDiv from '../../../../../component/some_div/fetching/FetchingDiv';\n//\nimport { initialValues } from '../../../__default/DefaultCity';\nimport MainForm from '../../../component/form_yup/_main/CityForm';\n//\nimport './AddNewCity.scss';\n\n//\nfunction AddNewCity() {\n    // state\n    const [is_fetching, setIsFetching] = useState(false);\n    const [is_submitted, setIsSubmitted] = useState(false);\n    //\n    useEffect(() => {\n        document.title = 'Add new city';\n    }, []);\n\n    // Submit\n    async function handleSubmit(data) {\n        try {\n            const {city, street, file} = data;\n            setIsFetching(true);\n            //\n            const formData = makeFormData({\n                city: city,\n                street: street,\n                image: file,\n                profile_user: 1,\n            });\n            await API_City_C(formData);\n            //\n            setIsSubmitted(true);\n        } catch (e) {\n            console.log(e);\n            setIsFetching(false)\n        }\n    }\n\n    //\n    if (is_submitted) {\n        return <Redirect to=\"/city-street\" />;\n    }\n    //\n    if (localStorage.is_login != 1) {\n        return <Redirect to=\"/login-form\" />;\n    }\n    //\n    return (\n        <div className=\"AddNewCity\">\n            <div className=\"label-field text-align-center\">\n                Let's create a post about your city now!\n            </div>\n            <br />\n\n            <div>\n                <MainForm\n                    initialValues={initialValues}\n                    handleSubmit={handleSubmit}\n                />\n            </div>\n\n            <BlurFetchingDiv\n                FetchingComponent={FetchingDiv}\n                open_fetching={is_fetching}\n            />\n        </div>\n    );\n}\n\nexport default AddNewCity;\n"],"sourceRoot":""}